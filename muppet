#! /usr/bin/env python

'''
Manage configurations
'''

import sys
from argparse import ArgumentParser

import logging
from mako.template import Template
from mako.lookup import TemplateLookup
import subprocess
import yaml
import pprint

APTGETCMDS = 'install', 'purge'

class MuppetError(Exception):
    pass

def call(command, dryrun):
    subprocess.call(command, shell=True)

def aptget(args, command, verbose, dryrun):
    cmd = "sudo apt-get %s%s %s" % ('-s ' if dryrun else '', command, args)
    logging.debug(cmd)
    subprocess.call(cmd, shell=True)

def parse(string, verbose, dryrun):
    cmd, args = string.split(None, 1)
    if cmd == 'call':
        call(args, dryrun)
    elif cmd in APTGETCMDS:
        aptget(args, cmd, verbose, dryrun)
    else:
        raise MuppetError("Unexpected command: %s" % cmd)

def applyconf(args):
    '''
    Apply configuration
    '''

    lookup = TemplateLookup(directories=['.'])
    template = Template(filename=args.config, lookup=lookup)
    for entry in yaml.load(template.render()):
        if isinstance(entry, str):
            # parse(entry, args.verbose, args.dryrun)
            pass
        elif isinstance(entry, dict):
            print entry
            entry.popitem()
        else:
            raise MuppetError("Unexpected entry type")

def main():
    '''
    Entry function
    '''

    parser = ArgumentParser(description="manage configurations")
    subs = parser.add_subparsers()
    papply = subs.add_parser('apply', help="apply configuration")
    papply.add_argument('config', help="configuration file")
    papply.add_argument('--dryrun', '-n', action='store_true',
                        help="don't perform any change")
    papply.add_argument('--verbose', '-v', action='store_true',
                        help="be more verbose")
    papply.set_defaults(func=applyconf)
    args = parser.parse_args()

    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format="%(message)s")

    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
