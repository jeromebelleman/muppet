#! /usr/bin/env python

'''
Manage configurations
'''

import sys
import os
from os.path import expanduser, exists, islink
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import stat, pwd, grp

import logging
import subprocess
import pprint

from mako.template import Template

WARNLINK = "%s is a link, not sure what to do and won't do anything"
FILES = '%s/files/root/%s'

def include(module):
    execfile('%s/%s.py' % (_globals['_cfg']['directory'], module), _globals)

def run(command):
    logging.debug(command)
    if not _globals['_cfg']['dryrun']:
        subprocess.call(command, shell=True)

def _aptget(command, args, verbose, dryrun):
    cmd = "sudo apt-get %s%s %s" % \
        ('-s ' if dryrun else '', command, ' '.join(args))
    logging.debug(cmd)
    subprocess.call(cmd, shell=True)

def install(*args):
    _aptget('install', args,
            _globals['_cfg']['verbose'], _globals['_cfg']['dryrun'])
 
def purge(*args):
    _aptget('purge', args,
            _globals['_cfg']['verbose'], _globals['_cfg']['dryrun'])

def edit(path, owner, group, mode):
    status = os.stat(path)

    # Change owner and group
    uid = pwd.getpwnam(owner).pw_uid
    gid = grp.getgrnam(group).gr_gid
    if uid != status.st_uid or gid != status.st_gid:
        # TODO To be tested
        if islink(path):
            logging.warning(WARNLINK % path)
        else:
            logging.debug("chowning %s:%s %s" % (owner, group, path))
            if not _globals['_cfg']['dryrun']:
                # TODO To be tested
                os.chown(path, uid, gid)

    # Change mode
    if mode != stat.S_IMODE(status.st_mode):
        # TODO To be tested
        if islink(path):
            logging.warning(WARNLINK % path)
        else:
            logging.debug("chmoding %s %s" % oct(mode))
            if not _globals['_cfg']['dryrun']:
                # TODO To be tested
                os.chmod(path, mode)

    # Apply template
    tpt = Template(filename=FILES % (_globals['_cfg']['directory'], path[1:]))
    print tpt.render()

def isfreshinstall():
    return not exists(_globals['_cfg']['directory'] + '/notjustinstalled')

def islaptop():
    return True

def applyconf(args):
    '''
    Apply configuration
    '''

    global _globals

    _globals = {'_cfg':           {'dryrun':    args.dryrun,
                                   'verbose':   args.verbose,
                                   'directory': args.directory,
                                  },
                'include':        include,
                'run':            run,
                'edit':           edit,
                'install':        install,
                'purge':          purge,
                'isfreshinstall': isfreshinstall,
                'islaptop':       islaptop,
               }
    execfile(expanduser(args.directory) + '/index.py', _globals)

def main():
    '''
    Entry function
    '''

    parser = ArgumentParser(description="manage configurations")
    subs = parser.add_subparsers()
    papply = subs.add_parser('apply', help="apply configuration",
                             formatter_class=ArgumentDefaultsHelpFormatter)
    papply.add_argument('-d', '--directory', help="configuration directory",
                        default='~/.muppet')
    papply.add_argument('--dryrun', '-n', action='store_true',
                        help="don't perform any change")
    papply.add_argument('--verbose', '-v', action='store_true',
                        help="be more verbose")
    papply.set_defaults(func=applyconf)
    args = parser.parse_args()

    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format="%(message)s")

    try:
        args.func(args)
    except IOError, e:
        logging.error(e)

if __name__ == '__main__':
    sys.exit(main())
