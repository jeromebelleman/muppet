#! /usr/bin/env python

'''
Manage configurations
'''

import sys
import os
from os.path import abspath, dirname
from argparse import ArgumentParser

import logging
import subprocess
import pprint

class MuppetError(Exception):
    pass

def call(command, dryrun):
    logging.debug(command)
    if not dryrun:
        subprocess.call(command, shell=True)

def aptget(command, args, verbose, dryrun):
    cmd = "sudo apt-get %s%s %s" % \
        ('-s ' if dryrun else '', command, ' '.join(args))
    logging.debug(cmd)
    subprocess.call(cmd, shell=True)

def install(*args):
    aptget('install', args, verbose, dryrun)

def purge(*args):
    aptget('purge', args, verbose, dryrun)

def applyconf(args):
    '''
    Apply configuration
    '''

    global dryrun, verbose 

    dryrun = args.dryrun
    verbose = args.verbose
    sys.path.append(dirname(abspath(args.config)))
    execfile(args.config)

def main():
    '''
    Entry function
    '''

    parser = ArgumentParser(description="manage configurations")
    subs = parser.add_subparsers()
    papply = subs.add_parser('apply', help="apply configuration")
    papply.add_argument('config', help="configuration file")
    papply.add_argument('--dryrun', '-n', action='store_true',
                        help="don't perform any change")
    papply.add_argument('--verbose', '-v', action='store_true',
                        help="be more verbose")
    papply.set_defaults(func=applyconf)
    args = parser.parse_args()

    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format="%(message)s")

    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
