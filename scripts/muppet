#! /usr/bin/env python

'''
Manage configurations
'''

import os, sys
from os.path import expanduser, dirname
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import errno
import logging
import datetime

import muppet.functions

# TODO Software repositories
# TODO Improve backtrace reporting from templates
# TODO Warn against running in X?
# TODO Do without 'notjustinstalled' file

DIR = '~/.muppet'
LOGFMT = '%(asctime)s %(levelname)s %(message)s'

def encrypt(_):
    '''
    Encrypt password
    '''

    import crypt
    import getpass
    import uuid
    # http://serverfault.com/questions/330069
    print crypt.crypt(getpass.getpass(), '$6$%s' % uuid.uuid4())

def applyconf(args):
    '''
    Apply configuration
    '''
            
    if args.daemonise:
        pid = os.fork()
        if pid != 0:
            return

        pid = os.fork()
        if pid != 0:
            return

    # Create runtime directory if needs be
    try:
        os.mkdir(args.runtime)
    except OSError, exc:
        if exc.errno != errno.EEXIST:
            print >> sys.stderr, exc
            return 1

    # Messages
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    # Messages to TTY
    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Messages to logfile
    handler = logging.FileHandler(args.runtime + '/log')
    formatter = logging.Formatter(LOGFMT)
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Set variables
    muppet.functions.__muppet__['_dryrun'] = args.dryrun
    muppet.functions.__muppet__['_verbose'] = args.verbose
    muppet.functions.__muppet__['_directory'] = args.directory
    muppet.functions.__muppet__['_runtime'] = args.runtime
    muppet.functions.__muppet__['_users'] = args.users
    muppet.functions.__muppet__['_time'] = datetime.datetime.now()
        
    logging.info("Beginning run")
    try:
        execfile(args.directory + '/index.py',
                 muppet.functions.__muppet__.copy())
    except SystemExit, exc:
        logging.warning("Exited: %s", exc)
    logging.info("Ending run")

def main():
    '''
    Entry function
    '''

    # Arguments
    parser = ArgumentParser(description="manage configurations",)
    subs = parser.add_subparsers()

    applyparser = subs.add_parser("apply", help="apply configuration",
                                  formatter_class=ArgumentDefaultsHelpFormatter)
    applyparser.add_argument('-d', '--directory', type=expanduser,
                             help="configuration directory",
                             default=DIR)
    applyparser.add_argument('--dryrun', '-n', action='store_true',
                             help="don't perform any change")
    applyparser.add_argument('--verbose', '-v', action='store_true',
                             help="be more verbose")
    applyparser.add_argument('--runtime', '-r', default=DIR,
                             help="write messages to log file too",
                             type=expanduser)
    helpmsg = "user:group pairs to apply the userwide config to"
    applyparser.add_argument('--users', '-u', nargs='+', default=[],
                             help=helpmsg)
    applyparser.add_argument('--daemonise', '-b', action='store_true',
                             help="run in the background")
    applyparser.set_defaults(func=applyconf)

    encryptparser = subs.add_parser("encrypt", help="encrypt password")
    encryptparser.set_defaults(func=encrypt)

    args = parser.parse_args()

    # Run
    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
