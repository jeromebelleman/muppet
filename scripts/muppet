#! /usr/bin/env python

'''
Manage configurations
'''

import sys
from os.path import expanduser
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import logging
import datetime

import muppet.functions

# TODO Software repositories
# TODO Config somewhere in /var?
# TODO Improve backtrace reporting from templates
# TODO Warn against running in X?

DIR = '~/.muppet'

def encrypt(_):
    '''
    Encrypt password
    '''

    import crypt
    import getpass
    import uuid
    # http://serverfault.com/questions/330069
    print crypt.crypt(getpass.getpass(), '$6$%s' % uuid.uuid4())

def applyconf(args):
    '''
    Apply configuration
    '''
            
    # Messages
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    if args.logfile:
        handler = logging.FileHandler(expanduser(args.logfile))
        formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    # Set variables
    muppet.functions.__muppet__['_dryrun'] = args.dryrun
    muppet.functions.__muppet__['_verbose'] = args.verbose
    muppet.functions.__muppet__['_directory'] = expanduser(args.directory)
    muppet.functions.__muppet__['_users'] = args.users
    muppet.functions.__muppet__['_time'] = datetime.datetime.now()
        
    logging.info("Beginning run")

    execfile(expanduser(args.directory) + '/index.py',
             muppet.functions.__muppet__.copy())

    logging.info("Ending run")

def main():
    '''
    Entry function
    '''

    # Arguments
    parser = ArgumentParser(description="manage configurations",)
    subs = parser.add_subparsers()

    applyparser = subs.add_parser("apply", help="apply configuration",
                                  formatter_class=ArgumentDefaultsHelpFormatter)
    applyparser.add_argument('-d', '--directory',
                             help="configuration directory",
                             default=DIR)
    applyparser.add_argument('--dryrun', '-n', action='store_true',
                             help="don't perform any change")
    applyparser.add_argument('--verbose', '-v', action='store_true',
                             help="be more verbose")
    applyparser.add_argument('--logfile', '-l', default='%s/log' % DIR,
                             help="write messages to log file too")
    helpmsg = "user:group pairs to apply the userwide config to"
    applyparser.add_argument('--users', '-u', nargs='+', default=[],
                             help=helpmsg)
    applyparser.set_defaults(func=applyconf)

    encryptparser = subs.add_parser("encrypt", help="encrypt password")
    encryptparser.set_defaults(func=encrypt)

    args = parser.parse_args()

    # Run
    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
