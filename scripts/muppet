#! /usr/bin/env python

'''
Manage configurations
'''

import os, sys
from os.path import expanduser, dirname
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import errno
import logging
import datetime
import subprocess
import string
import uuid
import stat
import time

import muppet.functions

# TODO Improve backtrace reporting from templates
# TODO Warn against running in X?
# TODO Edit config files from files with a different name

DIR = '~/.muppet'
CONNPATH = '/etc/NetworkManager/system-connections/'
LOGFMT = '%(asctime)s %(levelname)s %(message)s'

def encrypt(_):
    '''
    Encrypt password
    '''

    import crypt
    import getpass
    # http://serverfault.com/questions/330069
    print crypt.crypt(getpass.getpass(), '$6$%s' % uuid.uuid4())

def connect(connection, dryrun):
    # Get hardware address
    proc = subprocess.Popen(['ifconfig', 'wlan0'], stdout=subprocess.PIPE)
    first = True
    for line in proc.stdout:
        if first:
            hwaddr = line.split()[4].upper()
            first = False

    # Write connection file
    with open(connection) as fhl:
        template = string.Template(fhl.read())
    conn = os.path.basename(connection)
    path = CONNPATH + conn
    if os.path.exists(path):
        msg = "%s already exists, will use this instead of overwriting it"
        logging.info(msg, path)
        doremove = False
    else:
        logging.info("writing %s", path)
        doremove = True
        if not dryrun:
            with open(path, 'w') as fhl:
                fhl.write(template.substitute(
                                              hwaddr=hwaddr,
                                              ssid=conn,
                                              uuid=uuid.uuid4(),
                                             ))
                os.chmod(path, stat.S_IRUSR | stat.S_IWUSR)

    # Connect
    logging.info("connecting to %s", conn)
    if not dryrun:
        time.sleep(5) # Wait for NetworkManager to notice
        try:
            subprocess.check_call(['nmcli', 'con', 'up', 'id', conn])
        except subprocess.CalledProcessError:
            logging.warn("couldn't connect to %s", conn)

    return path if doremove else None


def applyconf(args):
    '''
    Apply configuration
    '''
            
    if args.daemonise:
        sid = os.getsid(os.getpid())

        pid = os.fork()
        if pid != 0:
            return

        os.setsid()
        pid = os.fork()
        if pid != 0:
            return
    else:
        sid = None

    # Create runtime directory if needs be
    try:
        os.mkdir(args.runtime)
    except OSError, exc:
        if exc.errno != errno.EEXIST:
            print >> sys.stderr, exc
            return 1

    # Messages
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    # Messages to TTY
    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Messages to logfile
    handler = logging.FileHandler(args.runtime + '/log')
    formatter = logging.Formatter(LOGFMT)
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Set variables
    muppet.functions.__muppet__['_dryrun'] = args.dryrun
    muppet.functions.__muppet__['_verbose'] = args.verbose
    muppet.functions.__muppet__['_directory'] = args.directory
    muppet.functions.__muppet__['_runtime'] = args.runtime
    muppet.functions.__muppet__['_users'] = args.users
    muppet.functions.__muppet__['_time'] = datetime.datetime.now()
    muppet.functions.__muppet__['_sid'] = sid

    # Run
    logging.info("beginning run on " + muppet.functions.hostname())

    # Connect if needs be
    if args.connection:
        path = connect(args.connection, args.dryrun)

    # Apply manifests
    try:
        execfile(args.directory + '/index.py',
                 muppet.functions.__muppet__.copy())
    except SystemExit, exc:
        logging.warning("Exited: %s", exc)

    # Disconnect if needs be
    if args.connection and path:
        logging.info("removing %s", path)
        if not args.dryrun:
            os.remove(path)

    logging.info("ending run on " + muppet.functions.hostname())

def main():
    '''
    Entry function
    '''

    # Arguments
    parser = ArgumentParser(description="manage configurations",)
    subs = parser.add_subparsers()

    applyparser = subs.add_parser('apply', help="apply configuration",
                                  formatter_class=ArgumentDefaultsHelpFormatter)
    applyparser.add_argument('-d', '--directory', type=expanduser,
                             help="configuration directory",
                             default=DIR)
    applyparser.add_argument('--dryrun', '-n', action='store_true',
                             help="don't perform any change")
    applyparser.add_argument('--verbose', '-v', action='store_true',
                             help="be more verbose")
    applyparser.add_argument('--runtime', '-r', default=DIR,
                             help="write messages to log file too",
                             type=expanduser)
    helpmsg = "user:group pairs to apply the userwide config to"
    applyparser.add_argument('--users', '-u', nargs='+', default=[],
                             help=helpmsg)
    applyparser.add_argument('--daemonise', '-b', action='store_true',
                             help="run in the background")
    applyparser.add_argument('--connection', '-c', metavar='CONNTEMPL',
                             help="connection template, with the $ssid\
                                   placeholder set for 'id' and 'ssid',\
                                   the $uuid placeholder set for 'uuid' and the\
                                   $hwaddr placeholder set for 'mac-address'")
    applyparser.set_defaults(func=applyconf)

    encryptparser = subs.add_parser('encrypt', help="encrypt password")
    encryptparser.set_defaults(func=encrypt)

    args = parser.parse_args()

    # Run
    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
