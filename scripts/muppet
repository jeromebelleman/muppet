#! /usr/bin/env python

'''
Manage configurations
'''

import os
import os.path
import sys
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import errno
import logging
import datetime
import subprocess
import string
import uuid
import stat
import time

import muppet.functions # pylint: disable=no-name-in-module

# TODO Improve backtrace reporting from templates
# TODO Warn against running in X?

DIR = '/var/lib/muppet'
LOG = '/var/log/muppet.log'
CONNPATH = '/etc/NetworkManager/system-connections/'
LOGFMT = '%(asctime)s %(levelname)s %(message)s'

def encrypt(_):
    '''
    Encrypt password
    '''

    import crypt
    import getpass
    # http://serverfault.com/questions/330069
    print crypt.crypt(getpass.getpass(), '$6$%s' % uuid.uuid4())

def build(args):
    '''
    Build packages
    '''

    import re
    import yaml

    # Load config
    with open(args.directory + '/repository.yaml') as fhl:
        cfg = yaml.load(fhl)

    # Make directories if needs be
    repo = args.directory + '/repository/' + muppet.functions.architecture()

    try:
        os.makedirs(repo)
    except OSError, exc:
        if exc.errno != errno.EEXIST:
            print >> sys.stderr, exc
            return 1

    # List existing packages and their last change
    repkg = re.compile(r'^(?P<name>.+)-\d+.*\.deb$')

    existing = {}
    for fle in os.listdir(repo):
        match = repkg.match(fle)
        if match:
            existing[match.group('name')] = os.path.getctime(repo + '/' + fle)

    # For each package to be made
    change = False
    for package in cfg['packages']:
        # Format
        if not cfg['packages'][package] or \
            'cmd' not in cfg['packages'][package]:
            cmd = cfg['defaults']['cmd'].format(
                package=package,
                repository=repo,
            )

        if not cfg['packages'][package] or \
            'directory' not in cfg['packages'][package]:
            directory = cfg['defaults']['directory'].format(
                package=package,
            )

        # Check a file is newer than the package
        dobreak = False
        for root, _, files in os.walk(os.path.expanduser(directory)):
            for fle in files:
                if package not in existing or \
                    os.path.getctime(root + '/' + fle) > existing[package]:
                    # Make package and copy it to the repository
                    subprocess.call(
                        cmd,
                        shell=True,
                        cwd=os.path.expanduser(directory)
                    )
                    haschanged = True;
                    dobreak = True
                    break
            if dobreak:
                break

    # Scan packages
    if haschanged:
        with open(repo + '/Packages', 'w') as fhl:
            subprocess.call(['dpkg-scanpackages', repo], stdout=fhl)

def connect(connection, dryrun):
    '''
    Connect to network
    '''

    # Get hardware address
    proc = subprocess.Popen(['ifconfig', 'wlan0'], stdout=subprocess.PIPE)
    first = True
    for line in proc.stdout:
        if first:
            hwaddr = line.split()[4].upper()
            first = False

    # Write connection file
    with open(connection) as fhl:
        template = string.Template(fhl.read())
    conn = os.path.basename(connection)
    path = CONNPATH + conn
    if os.path.exists(path):
        msg = "%s already exists, will use this instead of overwriting it"
        logging.info(msg, path)
        doremove = False
    else:
        logging.info("writing %s", path)
        doremove = True
        if not dryrun:
            with open(path, 'w') as fhl:
                fhl.write(template.substitute(
                    hwaddr=hwaddr,
                    ssid=conn,
                    uuid=uuid.uuid4(),
                ))
                os.chmod(path, stat.S_IRUSR | stat.S_IWUSR)

    # Connect
    logging.info("connecting to %s", conn)
    if not dryrun:
        time.sleep(5) # Wait for NetworkManager to notice
        try:
            subprocess.check_call(['nmcli', 'con', 'up', 'id', conn])
        except subprocess.CalledProcessError:
            logging.warn("couldn't connect to %s", conn)

    return path if doremove else None


def applyconf(args):
    '''
    Apply configuration
    '''

    if args.daemonise:
        sid = os.getsid(os.getpid())

        pid = os.fork()
        if pid != 0:
            return

        os.setsid()
        pid = os.fork()
        if pid != 0:
            return
    else:
        sid = None

    # Messages
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    # Messages to TTY
    streamhandler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    streamhandler.setFormatter(formatter)
    logger.addHandler(streamhandler)

    # Messages to logfile
    filehandler = logging.FileHandler(args.log)
    formatter = logging.Formatter(LOGFMT)
    filehandler.setFormatter(formatter)
    logger.addHandler(filehandler)

    # Set variables
    muppet.functions.__muppet__['_dryrun'] = args.dryrun
    muppet.functions.__muppet__['_verbose'] = args.verbose
    muppet.functions.__muppet__['_directory'] = args.directory
    muppet.functions.__muppet__['_users'] = args.users
    muppet.functions.__muppet__['_time'] = datetime.datetime.now()
    muppet.functions.__muppet__['_sid'] = sid

    # Run
    logging.info("beginning run on " + muppet.functions.hostname())

    # Connect if needs be
    if args.connection:
        path = connect(args.connection, args.dryrun)

    # Apply manifests
    try:
        execfile(args.directory + '/manifests/index.py',
                 muppet.functions.__muppet__.copy())
    except IOError, exc:
        logging.warning(exc)
    except SystemExit, exc:
        logging.warning("Exited: %s", exc)

    # Disconnect if needs be
    if args.connection and path:
        logging.info("removing %s", path)
        if not args.dryrun:
            os.remove(path)

    logging.info("ending run on " + muppet.functions.hostname())

def main():
    '''
    Entry function
    '''

    # Arguments
    parser = ArgumentParser(description="manage configurations",)
    parser.add_argument('-d', '--directory', type=os.path.expanduser,
                        help="Muppet directory", default=DIR)

    subs = parser.add_subparsers()

    applyparser = subs.add_parser('apply', help="apply configuration",
                                  formatter_class=ArgumentDefaultsHelpFormatter)
    applyparser.add_argument('--dryrun', '-n', action='store_true',
                             help="don't perform any change")
    applyparser.add_argument('--verbose', '-v', action='store_true',
                             help="be more verbose")
    applyparser.add_argument('--log', '-l', default=LOG,
                             help="log file path", type=os.path.expanduser)
    helpmsg = "user:group pairs to apply the userwide config to"
    applyparser.add_argument('--users', '-u', nargs='+', default=[],
                             help=helpmsg)
    applyparser.add_argument('--daemonise', '-b', action='store_true',
                             help="run in the background")
    applyparser.add_argument('--connection', '-c', metavar='CONNTEMPL',
                             help="connection template, with the $ssid\
                                   placeholder set for 'id' and 'ssid',\
                                   the $uuid placeholder set for 'uuid' and the\
                                   $hwaddr placeholder set for 'mac-address'")
    applyparser.set_defaults(func=applyconf)

    encryptparser = subs.add_parser('encrypt', help="encrypt password")
    encryptparser.set_defaults(func=encrypt)

    buildparser = subs.add_parser('build', help="build and deploy packages")
    buildparser.set_defaults(func=build)

    args = parser.parse_args()

    # Create runtime directory if needs be
    try:
        os.mkdir(args.directory)
    except OSError, exc:
        if exc.errno != errno.EEXIST:
            print >> sys.stderr, exc
            return 1

    # Run
    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
