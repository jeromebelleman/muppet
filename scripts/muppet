#! /usr/bin/env python

'''
Manage configurations
'''

import sys
from os.path import expanduser
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import logging

import muppet.functions

# TODO Userwide config

def applyconf(args):
    '''
    Apply configuration
    '''
            
    muppet.functions.__muppet__['_dryrun'] = args.dryrun
    muppet.functions.__muppet__['_verbose'] = args.verbose
    muppet.functions.__muppet__['_directory'] = expanduser(args.directory)

    execfile(expanduser(args.directory) + '/index.py',
             muppet.functions.__muppet__.copy())

def main():
    '''
    Entry function
    '''

    # Arguments
    parser = ArgumentParser(description="manage configurations")
    parser.add_argument('-d', '--directory', help="configuration directory",
                        default='~/.muppet')
    parser.add_argument('--dryrun', '-n', action='store_true',
                        help="don't perform any change")
    parser.add_argument('--verbose', '-v', action='store_true',
                        help="be more verbose")
    parser.add_argument('--logfile', '-l',
                        help="write messages to log file too")
    args = parser.parse_args()

    # Messages
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    if args.logfile:
        handler = logging.FileHandler(args.logfile)
        formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    # Run
    try:
        applyconf(args)
    except IOError, exc:
        logging.error(exc)

if __name__ == '__main__':
    sys.exit(main())
